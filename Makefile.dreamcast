USE_LOCOLOUR ?= 1
USE_TOONSCAPE ?= 1
RENDER_GL ?= 0
LEGACY_GL ?= 0

TARGET = mudclient.elf

# Updated source paths
SRC = $(wildcard src/*.c src/lib/*.c src/ui/*.c src/custom/*.c)

# Include rsa-tiny.c explicitly
SRC += src/lib/rsa/rsa-tiny.c

# Filter SDL source files to include only the correct implementation
SRC := $(filter-out src/mudclient-sdl2.c src/mudclient-sdl.c, $(SRC))
SRC := $(filter-out src/mudclient-sdl12.c, $(SRC))  # Avoid duplicates
SRC += src/mudclient-sdl12.c  # Include only once

# Detect SDL version based on SDLOLD variable
ifeq ($(SDLOLD), 1)
    SDL_DIR = $(CURDIR)/SDL-dreamhal--GLDC
    SDL_CFLAGS = -I$(SDL_DIR)/include
    SDL_LDFLAGS = -L$(SDL_DIR)/lib -lSDL -lSDL_ttf
    $(info Using SDL-dreamhal--GLDC (legacy))
else ifeq ($(SDLOLD), 0)
    SDL_DIR = $(CURDIR)/SDL-1.2.1.3DC-SDL-dreamhal-GLDC/Precompiled\ Libraries\ and\ Headers

    # Quote paths to handle spaces
    SDL_CFLAGS = -I"$(SDL_DIR)/SDL/include" \
                 -I"$(SDL_DIR)/SDL_GLdc/include" \
                 -I"$(SDL_DIR)/SDL_image/include" \
                 -I"$(SDL_DIR)/SDL_mixer-1.2.6/include"

    SDL_LDFLAGS = "$(SDL_DIR)/SDL/libSDL.a" \
                  "$(SDL_DIR)/SDL_GLdc/libSDL_GLdc.a" \
                  "$(SDL_DIR)/SDL_image/libSDL_image.a" \
                  "$(SDL_DIR)/SDL_mixer-1.2.6/libSDL_mixer.a"

    $(info Using SDL-1.2.1.3DC-SDL-dreamhal-GLDC)
else
    $(error SDLOLD must be set to 0 or 1)
endif

# Default to SDL1.2 for Dreamcast
CFLAGS += -DSDL12
CFLAGS += -fwrapv -std=gnu99 -DRENDER_SW -DSDL_MAIN_HANDLED -DREVISION_177
CFLAGS += $(SDL_CFLAGS)
CFLAGS += -Isrc/lib/rsa  # Ensure include path for rsa.h

# Suppress specific warnings
CFLAGS += -Wno-redundant-decls -Wno-unused-function -Wno-unused-variable
CFLAGS += -Wno-sign-compare -Wno-pointer-sign
CFLAGS += -Wno-strict-aliasing -Wno-implicit-function-declaration

# Simplified linker flags
LDFLAGS = $(SDL_LDFLAGS)
LDFLAGS += -L/opt/toolchains/dc/kos-ports/lib
LDFLAGS += -L$(KOS_BASE)/addons/lib/$(KOS_ARCH)
LDFLAGS += -lppp -lm

# Debugging and optimization flags
ifdef DEBUG
CFLAGS += -Wall -Wextra -pedantic -g -v
LDFLAGS += -v
else
CFLAGS += -O3 -ffast-math
LDFLAGS += -s
endif

# Generate object files
OBJS = $(SRC:.c=.o)

# Include KOS build rules
include $(KOS_BASE)/Makefile.rules

# Debug: Print source files being compiled
debug:
	@echo "Sources: $(SRC)"
	@echo "Objects: $(OBJS)"
	@echo "Using SDL from: $(SDL_DIR)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "LDFLAGS: $(LDFLAGS)"

# Build rules
all: rm-elf $(TARGET)

clean: rm-elf
	-rm -f $(OBJS)

rm-elf:
	-rm -f $(TARGET)

%.o: %.c
	kos-cc $(CFLAGS) -c $< -o $@

$(TARGET): $(OBJS)
	@echo "Linking $(TARGET)..."
	kos-cc $(CFLAGS) -o $(TARGET) $(OBJS) $(LDFLAGS)

run: $(TARGET)
	$(KOS_LOADER) $(TARGET)

dist: $(TARGET)
	-rm -f $(OBJS)
	$(KOS_STRIP) $(TARGET)

$(info Filtered source files: $(SRC))
